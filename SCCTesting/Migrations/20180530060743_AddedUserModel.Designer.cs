// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using SCCTesting.Models.Enums;
using SCCTesting.Persistence;
using System;

namespace SCCTesting.Migrations
{
    [DbContext(typeof(SCCTestingDbContext))]
    [Migration("20180530060743_AddedUserModel")]
    partial class AddedUserModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.3-rtm-10026")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SCCTesting.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("SCCTesting.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(80);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Professors");
                });

            modelBuilder.Entity("SCCTesting.Models.ProfessorTerm", b =>
                {
                    b.Property<int>("ProfessorId");

                    b.Property<int>("TermId");

                    b.HasKey("ProfessorId", "TermId");

                    b.HasIndex("TermId");

                    b.ToTable("ProfessorTerm");
                });

            modelBuilder.Entity("SCCTesting.Models.ProfessorTermCourse", b =>
                {
                    b.Property<int>("ProfessorId");

                    b.Property<int>("TermId");

                    b.Property<int>("CourseId");

                    b.HasKey("ProfessorId", "TermId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("ProfessorTermCourse");
                });

            modelBuilder.Entity("SCCTesting.Models.Student", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(15);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("SCCTesting.Models.StudentTest", b =>
                {
                    b.Property<string>("StudentId");

                    b.Property<int>("TestId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("StudentTestRequest");

                    b.HasKey("StudentId", "TestId");

                    b.HasIndex("TestId");

                    b.ToTable("StudentTest");
                });

            modelBuilder.Entity("SCCTesting.Models.Term", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsCurrent");

                    b.Property<string>("Semester")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Terms");
                });

            modelBuilder.Entity("SCCTesting.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .HasMaxLength(255);

                    b.Property<int>("CourseId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("ProfessorId");

                    b.Property<int>("TermId");

                    b.HasKey("Id");

                    b.HasIndex("ProfessorId", "TermId", "CourseId");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("SCCTesting.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SCCTesting.Models.ProfessorTerm", b =>
                {
                    b.HasOne("SCCTesting.Models.Professor", "Professor")
                        .WithMany("ProfessorTerms")
                        .HasForeignKey("ProfessorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCCTesting.Models.Term", "Term")
                        .WithMany("ProfessorTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCCTesting.Models.ProfessorTermCourse", b =>
                {
                    b.HasOne("SCCTesting.Models.Course", "Course")
                        .WithMany("ProfessorTermCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCCTesting.Models.ProfessorTerm", "ProfessorTerm")
                        .WithMany("ProfessorTermCourses")
                        .HasForeignKey("ProfessorId", "TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCCTesting.Models.StudentTest", b =>
                {
                    b.HasOne("SCCTesting.Models.Student", "Student")
                        .WithMany("StudentTests")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SCCTesting.Models.Test", "Test")
                        .WithMany("StudentTests")
                        .HasForeignKey("TestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SCCTesting.Models.Test", b =>
                {
                    b.HasOne("SCCTesting.Models.ProfessorTermCourse", "ProfessorTermCourse")
                        .WithMany("Tests")
                        .HasForeignKey("ProfessorId", "TermId", "CourseId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
